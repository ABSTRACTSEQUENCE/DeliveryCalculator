const formulaContainer = document.getElementById("formulaContainer");
const propertyContainer = document.getElementById("propertyContainer");

const properties = JSON.parse(localStorage.getItem("properties"));
const formulas = JSON.parse(localStorage.getItem("formulas"));

document.getElementById("btCalculate").addEventListener("click", calculate);
document.getElementById("btSaveFormula").addEventListener("click", saveFormula);

function renderPropertiesAndFormulas() {
  /*
  –ú–µ—Ç–æ–¥ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
  */
  if (properties != undefined) {
    render(properties, propertyContainer);
  } else console.trace("No saved properties to render");
  if (formulas != undefined) {
    render(formulas, formulaContainer);
  } else console.trace("No saved formulas to render");
  function render(items, container) {
    Object.entries(items).forEach(([key, value]) => {
      const element = document.createElement("button");
      element.setAttribute("draggable", "true");
      element.textContent = `${key} = ${value}`;
      element.addEventListener("dragstart", (e) => {
        e.dataTransfer.setData("text/plain", value);
      });
      container.appendChild(element);
    });
  }
}

/*function generateTile() {
  if (document.getElementById("operations")) return;
  let operations = document.createElement("div");
  operations.id = "operations";
  const operationLayout = `
      <button>+</button>
      <button>-</button>
      <button>/</button>
      <button>*</button>`;
  operations.innerHTML = operationLayout;

  const container = document.getElementById("tileContainer");
  let tile;
  tile = document.createElement("input");
  tile.setAttribute("placeholder", "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ");
  tile.setAttribute("type", "number");
  tile.addEventListener("drop", (e) => {
    if (tile.value == "") generateTile();
    tile.value = parseInt(e.dataTransfer.getData("text/plain"));
    e.preventDefault();
  });
  tile.addEventListener("change", (e) => {
    if (tile.value == "") tile.value = 0;
  });

  tile.classList.add("tile");

  container.appendChild(tile);
  container.appendChild(operations);
  Array.from(document.querySelectorAll("#operations > button")).forEach(
    (bt) => {
      bt.onclick = (e) => {
        if (tile.value == "") return;
        let operation = document.getElementById("operations");
        operation.id = "";
        operation.classList.add("operations");

        //—Å–¥–µ–ª–∞–π —á—Ç–æ–± –º–æ–∂–Ω–æ –±—ã–ª–æ –º–µ–Ω—è—Ç—å –∑–Ω–∞–∫ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã–±—Ä–∞–ª —É–∂–µ
        generateTile();
      };
    }
  );
}*/
function generateTile() {
  // –ï—Å–ª–∏ operations —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
  let operations = document.getElementById("operations");
  if (operations) {
    operations.style.display = "grid";
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç operations
  operations = document.createElement("div");
  operations.id = "operations";
  operations.style.display = "grid";
  operations.style.gridTemplateColumns = "repeat(4, 1fr)";
  operations.style.gap = "5px";

  const operationLayout = `
      <button>+</button>
      <button>-</button>
      <button>/</button>
      <button>*</button>`;
  operations.innerHTML = operationLayout;

  const container = document.getElementById("tileContainer");
  let tile = document.createElement("input");
  tile.setAttribute("placeholder", "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ");
  tile.setAttribute("type", "number");

  tile.addEventListener("drop", (e) => {
    if (tile.value == "") generateTile();
    tile.value = parseInt(e.dataTransfer.getData("text/plain"));
    e.preventDefault();
  });

  tile.addEventListener("change", (e) => {
    if (tile.value == "") tile.value = 0;
  });

  tile.classList.add("tile");

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ tile –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
  tile.addEventListener("click", () => {
    const ops = document.getElementById("operations");
    if (ops) ops.style.display = "grid";
  });

  container.appendChild(tile);
  container.appendChild(operations);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
  Array.from(operations.querySelectorAll("button")).forEach((bt) => {
    bt.onclick = () => {
      if (tile.value == "") return;

      // –°–æ–∑–¥–∞–µ–º div –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      let operationDisplay = tile.nextElementSibling;
      if (
        !operationDisplay ||
        !operationDisplay.classList.contains("operation-display")
      ) {
        operationDisplay = document.createElement("button");
        operationDisplay.className = "operation-display";
        container.insertBefore(operationDisplay, operations);
      }

      operationDisplay.textContent = bt.textContent;

      // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ü–∏–π
      operations.style.display = "none";

      // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
      operationDisplay.onclick = () => {
        operations.style.display = "grid";
      };
    };
  });
}
function calculate() {
  /*
  –ú–µ—Ç–æ–¥ —Å—á–∏—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤—Å–µ—Ö —Ç–∞–π–ª–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
  –∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ div —Å id 'result'

  TODO: –ò–∑–±–µ–∂–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
  */
  let operation = "";
  let result = 0;
  Array.from(document.getElementsByClassName("tile")).forEach((tile) => {
    const value = parseInt(tile.value);
    if (isNaN(value)) {
      operation = tile.value;
    } else {
      switch (operation) {
        case "+":
          result += value;
          break;
        case "-":
          result -= value;
          break;
        case "*":
          result *= value;
          break;
        case "/":
          result /= value;
          break;
        case "":
          result = value;
          break;
      }
    }
  });
  document.getElementById("result").textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`;
}

/*
  –ú–µ—Ç–æ–¥—ã saveFormula() –∏ saveProperty() –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ä–º—É–ª—É/—Å–≤–æ–π—Å—Ç–≤–æ –∏–∑ —Ç–∞–π–ª–æ–≤.
  –§–æ—Ä–º—É–ª—ã/—Å–≤–æ–π—Å—Ç–≤–∞ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ 
  –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è –≤
  JSON-–æ–±—ä–µ–∫—Ç formulas/properties, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–ª—é—á–æ–º –±—É–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã/—Å–≤–æ–π—Å—Ç–≤–∞,
  –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–∫–∞ —Å —Ñ–æ—Ä–º—É–ª–æ–π/–∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞

  –ü—Ä–∏–º–µ—Ä JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏:
  –°–≤–æ–π—Å—Ç–≤–∞:
  {
    fuelCost: 5, 
    pricePerKm: 10
  }
  –§–æ—Ä–º—É–ª—ã:
  {
    fuelCost: '123+321+666+abracadabra/200',
    pricePerKm: 'a+b+c+fuelCost'
  }
*/

function saveFormula() {
  let str = "";
  const arr = Array.from(document.getElementsByClassName("tile"));
  if (arr.length > 1) {
    localStorage.set();
    alert("–§–æ—Ä–º—É–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
  } else alert("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É —Å –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º");
}

function saveProperty() {}

generateTile(false);

renderPropertiesAndFormulas();
/*
TODO;
- –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–∞–Ω–µ–ª–∏ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç main layout
- –°–º. calculate()

–Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è, —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è.
–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å—Ç–∞–Ω–µ—Ç –¥–≤–µ—Ä—å—é –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±–∏–≤–∞–π –Ω–∞ –Ω–µ–≥–æ.
–¢—ã –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–µ–Ω—Ç, –¥—É–º–∞—è "–Ω—É –∏ —Ö—É–π–Ω—é –∂–µ —è –Ω–∞–ø–∏—Å–∞–ª", –Ω–æ, –ø—Ä–æ—à—É, –Ω–µ –∑–∞–±–∏–≤–∞–π –Ω–∞ –ø—Ä–æ–µ–∫—Ç.
–¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –±–æ–ª—å—à–µ–≥–æ. –¢–µ–±–µ —Å—Ç–æ–∏—Ç –Ω–∞—á–∞—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–æ–Ω–µ–Ω—Ü–∏–∞–ª, 
–≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–±–∏–≤–∞—Ç—å—Å—è –∑–∞ 30–∫.
–ö–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ —Å–º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å —Å–µ–±–µ –Ω–æ—É—Ç–±—É–∫, 
—É–µ—Ö–∞—Ç—å –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∂–∏–∑–Ω—å.
–° –Ω—É–ª—è. –ë—É–¥—Ç–æ –≤—Å–µ–≥–æ —ç—Ç–æ–≥–æ –Ω–µ –±—ã–ª–æ. –¢—ã –∑–∞–±—É–¥–µ—à—å —ç—Ç–æ—Ç —ç—Ç–∞–ø –∂–∏–∑–Ω–∏ –∫–∞–∫ 
—Å—Ç—Ä–∞—à–Ω—ã–π —Å–æ–Ω, –∏, –Ω–∞–∫–æ–Ω–µ—Ü, –Ω–∞—á–Ω—ë—à—å –∂–∏—Ç—å.
–ü—Ä–æ—à—É, –¥–æ–¥–µ–ª–∞–π —ç—Ç–æ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ –∑–∞–ª–µ–π –µ–≥–æ –Ω–∞ GitHub. –î–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –¥—É–º–∞–µ—à—å —á—Ç–æ –≤—Å—ë –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ,
–ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –æ–± —ç—Ç–æ–º –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞–≤.

–ò –Ω–∞–π–¥–∏ —Å–µ–±–µ –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞. –¢–µ–±–µ —Å–ª–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ù–∞–¥–æ —á—Ç–æ-—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å.
–ñ–µ–ª–∞—é —Ç–µ–±–µ —É–¥–∞—á–∏ –∏ —Ç–µ—Ä–ø–µ–Ω–∏—è. –ò–¥–∏ –∫ —Å–≤–æ–µ–π –º–µ—á—Ç–µ –∏ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è. 
–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é –∏ —è –∏–∑–º–µ–Ω—é —Ç–≤–æ—é –∂–∏–∑–Ω—å –≤ –ª—É—á—à—É—é —Å—Ç–æ—Ä–æ–Ω—É.

0:16AM - –¢–≤–æ—è –Ω–æ—á–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å

20:21 PM –ü–æ–Ω—è–ª —Ç–µ–±—è –±—Ä–æ, –Ω–∞—á–∏–Ω–∞–µ–º –µ–±–∞—à–∏—Ç—å üí™
*/
